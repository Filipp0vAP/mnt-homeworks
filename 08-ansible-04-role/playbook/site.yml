---
# - name: Install Clickhouse
#   hosts: clickhouse
#   remote_user: netology
#   handlers:
#     - name: restart-clickhouse-service
#       become: true
#       ansible.builtin.service:
#         name: clickhouse-server
#         state: restarted
#   tasks:
#     - block:
#         - name: Get clickhouse distrib
#           ansible.builtin.get_url:
#             mode: 0644
#             url: "https://packages.clickhouse.com/rpm/stable/{{ item }}-{{ clickhouse_version }}.noarch.rpm"
#             dest: "./{{ item }}-{{ clickhouse_version }}.rpm"
#           with_items: "{{ clickhouse_packages }}"
#       rescue:
#         - name: Get clickhouse distrib
#           ansible.builtin.get_url:
#             mode: 0644
#             url: "https://packages.clickhouse.com/rpm/stable/clickhouse-common-static-{{ clickhouse_version }}.x86_64.rpm"
#             dest: "./clickhouse-common-static-{{ clickhouse_version }}.rpm"
#     - name: Install clickhouse packages
#       become: true
#       ansible.builtin.yum:
#         name:
#           - clickhouse-common-static-{{ clickhouse_version }}.rpm
#           - clickhouse-client-{{ clickhouse_version }}.rpm
#           - clickhouse-server-{{ clickhouse_version }}.rpm
#       notify: Start clickhouse service
#     - name: Copying Clickhouse config
#       become: true
#       ansible.builtin.template:
#         mode: 0644
#         src: templates/clickhouse_config.xml.j2
#         dest: /etc/clickhouse-server/config.xml
#       notify: restart-clickhouse-service
#     - name: Copying Clickhouse users
#       become: true
#       ansible.builtin.template:
#         mode: 0644
#         src: templates/clickhouse_users.xml.j2
#         dest: /etc/clickhouse-server/users.xml
#       notify: restart-clickhouse-service
#     - name: Start clickhouse service
#       become: true
#       ansible.builtin.systemd:
#         name: clickhouse-server
#         state: started
#     - name: Create database
#       ansible.builtin.command: "clickhouse-client -q 'create database logs;'"
#       register: create_db
#       failed_when: create_db.rc != 0 and create_db.rc != 82
#       changed_when: create_db.rc == 0
#     - name: Create table
#       ansible.builtin.command: clickhouse-client -q 'CREATE TABLE logs.logs_messages ("message" String) ENGINE = Log'
#       register: create_table
#       failed_when: create_table.rc != 0 and create_table.rc != 57
#       changed_when: create_table.rc == 0
- name: Vector installation
  hosts: vector
  remote_user: netology
  roles:
    - vector_role

# - name: Lighthouse installation
#   hosts: lighthouse
#   remote_user: netology
#   handlers:
#     - name: start-nginx
#       become: true
#       ansible.builtin.command: "nginx"
#       when: not ansible_check_mode
#     - name: reload-nginx
#       become: true
#       ansible.builtin.command: "nginx -s reload"
#       when: not ansible_check_mode
#   tasks:
#     - name: Install additional tools
#       become: true
#       ansible.builtin.yum:
#         name: "{{ packages }}"
#         state: present
#       vars:
#         packages:
#           - "unzip"
#           - "sed"
#     - name: Install EPEL repo
#       become: true
#       ansible.builtin.yum:
#         name: epel-release
#         state: present
#     - name: Install and launch nginx
#       become: true
#       ansible.builtin.yum:
#         name: nginx
#         state: present
#       when: not ansible_check_mode
#       notify: start-nginx
#     - name: Create nginx config
#       become: true
#       ansible.builtin.template:
#         mode: 0644
#         src: templates/lighthouse_nginx.conf.j2
#         dest: /etc/nginx/nginx.conf
#     - name: Get Lighthouse archive
#       become: true
#       ansible.builtin.get_url:
#         mode: 0644
#         url: "https://github.com/VKCOM/lighthouse/archive/refs/heads/master.zip"
#         dest: "./{{ lighthouse_archive }}.zip"
#     - name: Check Lighthouse archive downloaded
#       become: true
#       ansible.builtin.stat:
#         path: "./{{ lighthouse_archive }}.zip"
#       register: lh_arch_exists
#     - name: Creating destination directory
#       become: true
#       ansible.builtin.file:
#         path: "{{ lighthouse_unzip_dir }}"
#         state: directory
#         mode: 0777
#     - name: Unboxing Lighthouse
#       ansible.builtin.unarchive:
#         src: "./{{ lighthouse_archive }}.zip"
#         dest: "{{ lighthouse_unzip_dir }}"
#         remote_src: true
#       when: lh_arch_exists.stat.exists
#     - name: Configure Lighthouse
#       become: true
#       ansible.builtin.template:
#         mode: 0644
#         src: templates/lighthouse.conf.j2
#         dest: /etc/nginx/conf.d/default.conf
#     - name: Set Clickhouse Access Point
#       ansible.builtin.lineinfile:
#         path: "{{ lighthouse_clh_access_point_file }}"
#         regexp: "{{ lighthouse_clh_access_point_regexp }}"
#         line: "{{ lighthouse_clh_access_point }}"
#         firstmatch: true
#       when: not ansible_check_mode
#       notify: reload-nginx
...
